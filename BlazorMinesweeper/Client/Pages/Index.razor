@page "/"
@using BlazorMinesweeper.Client.Models;

<div class="minesweeper-game minesweeper-medium">
    <div class="minesweeper-board" @oncontextmenu:preventDefault onmousedown="@(board.Status != GameStatus.Completed ? "faceOooh(event);" : "")" onmouseup="faceSmile();">

        <div class="minesweeper-border-topleft"></div>

        @for (int i = 1; i < MaxWidth; i++)
        {
            <div class="minesweeper-border-horizontal"></div>
        }

        <div class="minesweeper-border-topright"></div>
        <div class="minesweeper-border-vertical-long"></div>
        <div class="minesweeper-time-@GetPlace(board.NumberOfMinesRemaining, 100)"
             id="mines_hundreds"></div>
        <div class="minesweeper-time-@GetPlace(board.NumberOfMinesRemaining, 10)"
             id="mines_tens"></div>
        <div class="minesweeper-time-@GetPlace(board.NumberOfMinesRemaining, 1)"
             id="mines_ones"></div>

        @if (board.Status == GameStatus.Failed)
        {
            <div class="minesweeper-face-dead"
             id="face"
             style="margin-left:70px; margin-right:70px;"
             @onclick="@(() => board.Reset())"></div>
        }
        else if (board.Status == GameStatus.Completed)
        {
            <div class="minesweeper-face-win"
             id="face"
             style="margin-left:70px; margin-right:70px;"
             @onclick="@(() => board.Reset())"></div>
        }
        else
        {
            <div class="minesweeper-face-smile"
             id="face"
             style="margin-left:70px; margin-right:70px;"
             @onclick="@(() => board.Reset())"></div>
        }

        <div class="minesweeper-time-@GetPlace(board.Stopwatch.Elapsed.Seconds,100)"
             id="seconds_hundreds"></div>
        <div class="minesweeper-time-@GetPlace(board.Stopwatch.Elapsed.Seconds,10)"
             id="seconds_tens"></div>
        <div class="minesweeper-time-@GetPlace(board.Stopwatch.Elapsed.Seconds,1)"
             id="seconds_ones"></div>
        <div class="minesweeper-border-vertical-long"></div>

        @for (int i = 0; i < MaxWidth; i++)
        {
            for (int j = 0; j < MaxHeight; j++)
            {
                //Need local variable to avoid problem with variable capturing (Why?)
                var x = i;
                var y = j;

                if (x == 0 && y == 0) //Upper-left corner
                {
                    <div class="minesweeper-border-jointleft"></div>
                }
                else if (x == 0 && y == MaxHeight) //Upper-right corner
                {
                    <div class="minesweeper-border-jointright"></div>
                }
                else if (x == MaxWidth && y == 0) //Lower-left corner
                {
                    <div class="minesweeper-border-bottomleft"></div>
                }
                else if (x == MaxWidth && y == MaxHeight) //Lower-right corner
                {
                    <div class="minesweeper-border-bottomright"></div>
                }
                else if (y == 0 || y == MaxHeight) //Leftmost column
                {
                    <div class="minesweeper-border-vertical"></div>
                }
                else if (x == 0 || x == MaxWidth) //Rightmost column
                {
                    <div class="minesweeper-border-horizontal"></div>
                }
                else if (y > 0 && y < MaxHeight)
                {
                    Console.WriteLine($"Normal panel: {x},{y}");
                    var currentPanel = board.Panels.First(m => m.X == x && m.Y == y);
                    
                    if (currentPanel.IsRevealed)
                    {
                        if (currentPanel.IsMine) //Mine
                        {
                            <div class="minesweeper-gamepiece minesweeper-mine"></div>
                        }
                        else if (currentPanel.NumberOfAdjacentMines == 0) //Blank
                        {
                            <div class="minesweeper-gamepiece minesweeper-0"></div>
                        }
                        else //Number
                        {
                            <div class="minesweeper-gamepiece minesweeper-@currentPanel.NumberOfAdjacentMines">@currentPanel.NumberOfAdjacentMines</div>
                        }
                    }
                    else if (currentPanel.IsFlagged)
                    {
                        <div class="minesweeper-gamepiece minesweeper-flagged"
             @oncontextmenu="@(() => board.FlagPanel(x, y))"
             @oncontextmenu:preventDefault>
                        </div>
                    }
                    else //Unrevealed
                    {
                        <div class="minesweeper-gamepiece minesweeper-unrevealed"
             @onclick="@(() => board.MakeMove(x, y))"
             @oncontextmenu="@(() => board.FlagPanel(x, y))"
             @oncontextmenu:preventDefault>
                        </div>
                    }
                }
            }
        }
    </div>
</div>

